#!/usr/bin/env bash

# Local CI Script
# This script runs all the same checks that the GitHub Actions CI will run
# Use this to catch issues before pushing code

set -e  # Exit on any error

echo "🔍 Running Local CI Checks..."
echo "=============================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "Gemfile" ]; then
    print_error "Gemfile not found. Please run this script from the Rails application root directory."
    exit 1
fi

# Step 1: Code Style (RuboCop)
print_status "Step 1: Checking code style with RuboCop..."
if bin/rubocop -f github; then
    print_success "RuboCop passed - no style violations found"
else
    print_error "RuboCop failed - please fix style violations before continuing"
    exit 1
fi

# Step 2: Security Scan (Brakeman)
print_status "Step 2: Running security scan with Brakeman..."
if bin/brakeman --no-pager --exit-on-warn; then
    print_success "Brakeman passed - no security issues found"
else
    print_error "Brakeman failed - please address security issues before continuing"
    exit 1
fi

# Step 3: Dependency Security Audit
print_status "Step 3: Checking dependencies for security vulnerabilities..."
if bundle exec bundle-audit check --update; then
    print_success "Bundle audit passed - no vulnerable dependencies found"
else
    print_error "Bundle audit failed - please update vulnerable dependencies before continuing"
    exit 1
fi

# Step 4: Asset Precompilation
print_status "Step 4: Testing asset precompilation..."
if bundle exec rails assets:precompile; then
    print_success "Asset precompilation passed"
else
    print_error "Asset precompilation failed - please fix asset issues before continuing"
    exit 1
fi

# Step 5: Database Setup
print_status "Step 5: Testing database setup..."
if bundle exec rails db:create db:schema:load; then
    print_success "Database setup passed"
else
    print_warning "Database setup failed - this might be expected if databases already exist"
fi

# Step 6: Run Tests (if RSpec is available)
if command -v bundle &> /dev/null && bundle exec rspec --version &> /dev/null; then
    print_status "Step 6: Running RSpec tests..."
    if bundle exec rspec; then
        print_success "RSpec tests passed"
    else
        print_error "RSpec tests failed - please fix failing tests before continuing"
        exit 1
    fi
else
    print_warning "Step 6: Skipping RSpec tests - RSpec not available"
fi

# Step 7: Run Feature Tests (if Cucumber is available)
if command -v bundle &> /dev/null && bundle exec cucumber --version &> /dev/null; then
    print_status "Step 7: Running Cucumber feature tests..."
    if bundle exec cucumber --format progress; then
        print_success "Cucumber tests passed"
    else
        print_error "Cucumber tests failed - please fix failing feature tests before continuing"
        exit 1
    fi
else
    print_warning "Step 7: Skipping Cucumber tests - Cucumber not available"
fi

echo ""
echo "=============================="
print_success "🎉 All CI checks passed!"
echo "=============================="
print_status "Your code is ready to be pushed to the repository"
print_status "The GitHub Actions CI should pass successfully"
echo ""
