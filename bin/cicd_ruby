#!/usr/bin/env bash

# CI/CD Ruby Environment Manager
# This script manages Ruby version and environment for CI/CD

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to configure Ruby environment
configure_ruby_environment() {
    print_status "Configuring Ruby environment..."
    
    # Check if we're in the right directory
    if [ ! -f "Gemfile" ]; then
        print_error "Gemfile not found. Please run this script from the Rails application root directory."
        exit 1
    fi
    
    # Check if Ruby is available
    if ! command -v ruby &> /dev/null; then
        print_error "Ruby not found. Please install Ruby first."
        exit 1
    fi
    
    # Get Ruby version
    RUBY_VERSION=$(ruby -v | cut -d' ' -f2)
    print_status "Detected Ruby version: $RUBY_VERSION"
    
    # Check if .ruby-version file exists and compare
    if [ -f ".ruby-version" ]; then
        REQUIRED_RUBY_VERSION=$(cat .ruby-version | tr -d '\n')
        print_status "Required Ruby version: $REQUIRED_RUBY_VERSION"
        
        if [ "$RUBY_VERSION" != "$REQUIRED_RUBY_VERSION" ]; then
            print_warning "Ruby version mismatch. Expected: $REQUIRED_RUBY_VERSION, Found: $RUBY_VERSION"
            print_status "Attempting to use rbenv or rvm to switch Ruby version..."
            
            # Try rbenv
            if command -v rbenv &> /dev/null; then
                print_status "Using rbenv to switch to Ruby $REQUIRED_RUBY_VERSION"
                eval "$(rbenv init -)"
                rbenv install -s $REQUIRED_RUBY_VERSION 2>/dev/null || true
                rbenv local $REQUIRED_RUBY_VERSION
                RUBY_VERSION=$(ruby -v | cut -d' ' -f2)
                print_success "Switched to Ruby version: $RUBY_VERSION"
            # Try rvm
            elif command -v rvm &> /dev/null; then
                print_status "Using rvm to switch to Ruby $REQUIRED_RUBY_VERSION"
                rvm use $REQUIRED_RUBY_VERSION --install --create
                RUBY_VERSION=$(ruby -v | cut -d' ' -f2)
                print_success "Switched to Ruby version: $RUBY_VERSION"
            else
                print_warning "No Ruby version manager found. Continuing with current version."
            fi
        fi
    fi
    
    # Check if Bundler is available
    if ! command -v bundle &> /dev/null; then
        print_status "Bundler not found. Installing Bundler..."
        gem install bundler
        if [ $? -ne 0 ]; then
            print_error "Failed to install Bundler. Please install it manually."
            exit 1
        fi
    fi
    
    # Get Bundler version
    BUNDLER_VERSION=$(bundle --version | cut -d' ' -f3)
    print_status "Bundler version: $BUNDLER_VERSION"
    
    # Check if gems are installed
    if [ ! -d "vendor/bundle" ] && [ ! -f ".bundle/config" ]; then
        print_status "Installing Ruby gems..."
        bundle install
        if [ $? -ne 0 ]; then
            print_error "Failed to install Ruby gems. Please run 'bundle install' manually."
            exit 1
        fi
    else
        print_status "Checking if gems are up to date..."
        bundle check || bundle install
    fi
    
    # Check if Rails is available
    if ! bundle exec rails --version &> /dev/null; then
        print_error "Rails not found. Please ensure Rails is in your Gemfile and run 'bundle install'."
        exit 1
    fi
    
    # Get Rails version
    RAILS_VERSION=$(bundle exec rails --version | cut -d' ' -f2)
    print_status "Rails version: $RAILS_VERSION"
    
    print_success "Ruby environment configured successfully"
}

# Main execution
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "CI/CD Ruby Environment Manager"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo "  --version     Show Ruby version information only"
    echo ""
    echo "This script:"
    echo "  - Checks Ruby version against .ruby-version file"
    echo "  - Switches Ruby version using rbenv or rvm if needed"
    echo "  - Installs Bundler if not available"
    echo "  - Installs/updates Ruby gems"
    echo "  - Validates Rails installation"
    exit 0
elif [ "$1" = "--version" ]; then
    if [ -f ".ruby-version" ]; then
        REQUIRED_RUBY_VERSION=$(cat .ruby-version | tr -d '\n')
        echo "Required Ruby version: $REQUIRED_RUBY_VERSION"
    fi
    CURRENT_RUBY_VERSION=$(ruby -v | cut -d' ' -f2)
    echo "Current Ruby version: $CURRENT_RUBY_VERSION"
    exit 0
else
    configure_ruby_environment
fi
